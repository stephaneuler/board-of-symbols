<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<snippet locale="de_DE" name="hanoi">
<author>Stephan Euler</author>
<created>Wed May 24 13:12:33 CEST 2017</created>
<comment><![CDATA[
Rekursive Programmierung zur Loesung des Tuerme von Hanoi Problems
]]></comment>
<language>Java</language>
<tag>Recursion</tag>
<codeA><![CDATA[
@Complete

int sleepTime = 500;
int N = 5;
int[][] tuerme = new int[3][N];
int anzahlSchritte = 0;
int[] colors = new int[N];


void mySend() throws InterruptedException {
   System.out.println( "Türme von Hanoi" );
   groesse(3, N+1);
   formen( "none" );
   text2(0, N, "A");
   text2(1, N, "Z");
   text2(2, N, "B");
   
   Random r = new Random();
   for (int i = 0; i < N; i++) {
      tuerme[0][i] = N - i;
      colors[i] =  r.nextInt(255) *256*256 + r.nextInt(255) *256 + r.nextInt(155);
   }
   
   zeichnen();
   Thread.sleep( 2* sleepTime);

   lege(N, 0, 2, 1);
   statusText("Fertig nach " + anzahlSchritte + " Zügen");
}
void zeichnen() {
   formen( "none" );
   for (int n = 0; n < 3; n++) {
      for (int s = 0; s < N; s++) {
         scheibe( n, s );
      }
   }
}

void scheibe( int n, int s ) {
   if (tuerme[n][s] != 0) {
      int scheibe = tuerme[n][s];
      form2(n, s, "-");
      symbolGroesse2(n, s, (double) scheibe / N / 2);
      farbe2(n, s, colors[scheibe-1]);
   } else {
      form2(n, s, "none");
   }
}

void lege(int n, int von, int nach, int zwischen) throws InterruptedException {
   if (n > 0) {
      lege(n - 1, von, zwischen, nach);
      ziehe( von, nach );
      statusText("N="+N + " Zug Nr. " + anzahlSchritte);
      Thread.sleep( sleepTime);
      lege(n - 1, zwischen, nach, von);
      anzahlSchritte++;
   }
}

private void ziehe(int von, int nach) {
   for( int i=N-1; i>=0; i-- ) {
      if( tuerme[von][i] != 0 ) {
         int scheibe = tuerme[von][i];
         tuerme[von][i] = 0;
         scheibe( von, i );
         for( int j=0; j<N; j++ ) {
            if( tuerme[nach][j] == 0) {
               tuerme[nach][j] = scheibe;
               scheibe( nach, j );
               return;
            }
         }
      }
   }
   
}
]]></codeA>
<updated>Wed May 24 13:27:35 CEST 2017</updated>
</snippet>
